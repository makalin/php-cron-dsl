#!/usr/bin/env php
<?php

declare(strict_types=1);

use CronDSL\Compiler\Compiler;
use CronDSL\Emitter\FilesystemEmitter;
use CronDSL\Emitter\StdoutEmitter;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

require_once __DIR__ . '/../vendor/autoload.php';

class CompileCommand extends Command
{
    protected function configure(): void
    {
        $this
            ->setName('compile')
            ->setDescription('Compile PHP cron configuration to systemd units')
            ->addArgument('config', InputArgument::REQUIRED, 'Path to PHP configuration file')
            ->addOption('out', 'o', InputOption::VALUE_REQUIRED, 'Output directory')
            ->addOption('prefix', 'p', InputOption::VALUE_REQUIRED, 'Prefix for unit names', '')
            ->addOption('timezone', 't', InputOption::VALUE_REQUIRED, 'Default timezone', 'UTC')
            ->addOption('user', 'u', InputOption::VALUE_REQUIRED, 'Default systemd user', 'root')
            ->addOption('dry-run', null, InputOption::VALUE_NONE, 'Print units to STDOUT')
            ->addOption('force', 'f', InputOption::VALUE_NONE, 'Overwrite existing files')
            ->addOption('validate', null, InputOption::VALUE_NONE, 'Validate only; no output')
            ->addOption('strict', null, InputOption::VALUE_NONE, 'Fail on unknown keys or lossy cron');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $configFile = $input->getArgument('config');
        
        if (!file_exists($configFile)) {
            $output->writeln("<error>Configuration file not found: {$configFile}</error>");
            return Command::FAILURE;
        }

        try {
            $config = require $configFile;
            
            if (!is_array($config)) {
                $output->writeln('<error>Configuration file must return an array</error>');
                return Command::FAILURE;
            }

            $compiler = new Compiler(
                defaultTimezone: $input->getOption('timezone'),
                defaultUser: $input->getOption('user')
            );

            $units = $compiler->compile($config);

            if ($input->getOption('validate')) {
                $output->writeln('<info>Configuration is valid</info>');
                return Command::SUCCESS;
            }

            if ($input->getOption('dry-run')) {
                $emitter = new StdoutEmitter();
                $emitter->write($units);
                return Command::SUCCESS;
            }

            $outputDir = $input->getOption('out');
            if (!$outputDir) {
                $output->writeln('<error>Output directory is required unless using --dry-run</error>');
                return Command::FAILURE;
            }

            $emitter = new FilesystemEmitter(
                outputDirectory: $outputDir,
                prefix: $input->getOption('prefix'),
                force: $input->getOption('force')
            );

            $emitter->write($units);

            $count = count($units);
            $output->writeln("<info>Successfully compiled {$count} unit(s) to {$outputDir}</info>");

            return Command::SUCCESS;

        } catch (\Exception $e) {
            $output->writeln("<error>Error: {$e->getMessage()}</error>");
            return Command::FAILURE;
        }
    }
}

$application = new Application('cron-dsl', '1.0.0');
$application->add(new CompileCommand());
$application->run();